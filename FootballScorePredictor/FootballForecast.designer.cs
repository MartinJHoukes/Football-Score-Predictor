#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace FootballScorePredictor
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="FootballForecast")]
	public partial class FootballForcastDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertForecast(Forecast instance);
    partial void UpdateForecast(Forecast instance);
    partial void DeleteForecast(Forecast instance);
    partial void InsertResult(Result instance);
    partial void UpdateResult(Result instance);
    partial void DeleteResult(Result instance);
    #endregion
		
		public FootballForcastDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["FootballForecastConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public FootballForcastDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public FootballForcastDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public FootballForcastDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public FootballForcastDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Forecast> Forecasts
		{
			get
			{
				return this.GetTable<Forecast>();
			}
		}
		
		public System.Data.Linq.Table<Result> Results
		{
			get
			{
				return this.GetTable<Result>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Forecast")]
	public partial class Forecast : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _MatchID;
		
		private int _HomeTeamID;
		
		private int _AwayTeamID;
		
		private System.Nullable<int> _HomeScoreForecast;
		
		private System.Nullable<int> _AwayScoreForecast;
		
		private System.Nullable<decimal> _ResultConfidence;
		
		private System.Nullable<decimal> _ScoreConfidence;
		
		private System.Nullable<bool> _CorrectResult;
		
		private System.Nullable<bool> _CorrectScore;
		
		private System.Nullable<System.DateTimeOffset> _ForecastDate;
		
		private System.Nullable<int> _Round;
		
		private System.Nullable<int> _LeagueID;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnMatchIDChanging(int value);
    partial void OnMatchIDChanged();
    partial void OnHomeTeamIDChanging(int value);
    partial void OnHomeTeamIDChanged();
    partial void OnAwayTeamIDChanging(int value);
    partial void OnAwayTeamIDChanged();
    partial void OnHomeScoreForecastChanging(System.Nullable<int> value);
    partial void OnHomeScoreForecastChanged();
    partial void OnAwayScoreForecastChanging(System.Nullable<int> value);
    partial void OnAwayScoreForecastChanged();
    partial void OnResultConfidenceChanging(System.Nullable<decimal> value);
    partial void OnResultConfidenceChanged();
    partial void OnScoreConfidenceChanging(System.Nullable<decimal> value);
    partial void OnScoreConfidenceChanged();
    partial void OnCorrectResultChanging(System.Nullable<bool> value);
    partial void OnCorrectResultChanged();
    partial void OnCorrectScoreChanging(System.Nullable<bool> value);
    partial void OnCorrectScoreChanged();
    partial void OnForecastDateChanging(System.Nullable<System.DateTimeOffset> value);
    partial void OnForecastDateChanged();
    partial void OnRoundChanging(System.Nullable<int> value);
    partial void OnRoundChanged();
    partial void OnLeagueIDChanging(System.Nullable<int> value);
    partial void OnLeagueIDChanged();
    #endregion
		
		public Forecast()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MatchID", DbType="Int NOT NULL")]
		public int MatchID
		{
			get
			{
				return this._MatchID;
			}
			set
			{
				if ((this._MatchID != value))
				{
					this.OnMatchIDChanging(value);
					this.SendPropertyChanging();
					this._MatchID = value;
					this.SendPropertyChanged("MatchID");
					this.OnMatchIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HomeTeamID", DbType="Int NOT NULL")]
		public int HomeTeamID
		{
			get
			{
				return this._HomeTeamID;
			}
			set
			{
				if ((this._HomeTeamID != value))
				{
					this.OnHomeTeamIDChanging(value);
					this.SendPropertyChanging();
					this._HomeTeamID = value;
					this.SendPropertyChanged("HomeTeamID");
					this.OnHomeTeamIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AwayTeamID", DbType="Int NOT NULL")]
		public int AwayTeamID
		{
			get
			{
				return this._AwayTeamID;
			}
			set
			{
				if ((this._AwayTeamID != value))
				{
					this.OnAwayTeamIDChanging(value);
					this.SendPropertyChanging();
					this._AwayTeamID = value;
					this.SendPropertyChanged("AwayTeamID");
					this.OnAwayTeamIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HomeScoreForecast", DbType="Int")]
		public System.Nullable<int> HomeScoreForecast
		{
			get
			{
				return this._HomeScoreForecast;
			}
			set
			{
				if ((this._HomeScoreForecast != value))
				{
					this.OnHomeScoreForecastChanging(value);
					this.SendPropertyChanging();
					this._HomeScoreForecast = value;
					this.SendPropertyChanged("HomeScoreForecast");
					this.OnHomeScoreForecastChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AwayScoreForecast", DbType="Int")]
		public System.Nullable<int> AwayScoreForecast
		{
			get
			{
				return this._AwayScoreForecast;
			}
			set
			{
				if ((this._AwayScoreForecast != value))
				{
					this.OnAwayScoreForecastChanging(value);
					this.SendPropertyChanging();
					this._AwayScoreForecast = value;
					this.SendPropertyChanged("AwayScoreForecast");
					this.OnAwayScoreForecastChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ResultConfidence", DbType="Decimal(8,2)")]
		public System.Nullable<decimal> ResultConfidence
		{
			get
			{
				return this._ResultConfidence;
			}
			set
			{
				if ((this._ResultConfidence != value))
				{
					this.OnResultConfidenceChanging(value);
					this.SendPropertyChanging();
					this._ResultConfidence = value;
					this.SendPropertyChanged("ResultConfidence");
					this.OnResultConfidenceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ScoreConfidence", DbType="Decimal(8,2)")]
		public System.Nullable<decimal> ScoreConfidence
		{
			get
			{
				return this._ScoreConfidence;
			}
			set
			{
				if ((this._ScoreConfidence != value))
				{
					this.OnScoreConfidenceChanging(value);
					this.SendPropertyChanging();
					this._ScoreConfidence = value;
					this.SendPropertyChanged("ScoreConfidence");
					this.OnScoreConfidenceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CorrectResult", DbType="Bit")]
		public System.Nullable<bool> CorrectResult
		{
			get
			{
				return this._CorrectResult;
			}
			set
			{
				if ((this._CorrectResult != value))
				{
					this.OnCorrectResultChanging(value);
					this.SendPropertyChanging();
					this._CorrectResult = value;
					this.SendPropertyChanged("CorrectResult");
					this.OnCorrectResultChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CorrectScore", DbType="Bit")]
		public System.Nullable<bool> CorrectScore
		{
			get
			{
				return this._CorrectScore;
			}
			set
			{
				if ((this._CorrectScore != value))
				{
					this.OnCorrectScoreChanging(value);
					this.SendPropertyChanging();
					this._CorrectScore = value;
					this.SendPropertyChanged("CorrectScore");
					this.OnCorrectScoreChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ForecastDate", DbType="datetime")]
		public System.Nullable<System.DateTimeOffset> ForecastDate
		{
			get
			{
				return this._ForecastDate;
			}
			set
			{
				if ((this._ForecastDate != value))
				{
					this.OnForecastDateChanging(value);
					this.SendPropertyChanging();
					this._ForecastDate = value;
					this.SendPropertyChanged("ForecastDate");
					this.OnForecastDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Round", DbType="int")]
		public System.Nullable<int> Round
		{
			get
			{
				return this._Round;
			}
			set
			{
				if ((this._Round != value))
				{
					this.OnRoundChanging(value);
					this.SendPropertyChanging();
					this._Round = value;
					this.SendPropertyChanged("Round");
					this.OnRoundChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LeagueID", DbType="int")]
		public System.Nullable<int> LeagueID
		{
			get
			{
				return this._LeagueID;
			}
			set
			{
				if ((this._LeagueID != value))
				{
					this.OnLeagueIDChanging(value);
					this.SendPropertyChanging();
					this._LeagueID = value;
					this.SendPropertyChanged("LeagueID");
					this.OnLeagueIDChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Result")]
	public partial class Result : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _MatchID;
		
		private int _HomeTeamID;
		
		private int _AwayTeamID;
		
		private int _HomeScore;
		
		private int _AwayScore;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnMatchIDChanging(int value);
    partial void OnMatchIDChanged();
    partial void OnHomeTeamIDChanging(int value);
    partial void OnHomeTeamIDChanged();
    partial void OnAwayTeamIDChanging(int value);
    partial void OnAwayTeamIDChanged();
    partial void OnHomeScoreChanging(int value);
    partial void OnHomeScoreChanged();
    partial void OnAwayScoreChanging(int value);
    partial void OnAwayScoreChanged();
    #endregion
		
		public Result()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MatchID", DbType="Int NOT NULL")]
		public int MatchID
		{
			get
			{
				return this._MatchID;
			}
			set
			{
				if ((this._MatchID != value))
				{
					this.OnMatchIDChanging(value);
					this.SendPropertyChanging();
					this._MatchID = value;
					this.SendPropertyChanged("MatchID");
					this.OnMatchIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HomeTeamID", DbType="Int NOT NULL")]
		public int HomeTeamID
		{
			get
			{
				return this._HomeTeamID;
			}
			set
			{
				if ((this._HomeTeamID != value))
				{
					this.OnHomeTeamIDChanging(value);
					this.SendPropertyChanging();
					this._HomeTeamID = value;
					this.SendPropertyChanged("HomeTeamID");
					this.OnHomeTeamIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AwayTeamID", DbType="Int NOT NULL")]
		public int AwayTeamID
		{
			get
			{
				return this._AwayTeamID;
			}
			set
			{
				if ((this._AwayTeamID != value))
				{
					this.OnAwayTeamIDChanging(value);
					this.SendPropertyChanging();
					this._AwayTeamID = value;
					this.SendPropertyChanged("AwayTeamID");
					this.OnAwayTeamIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HomeScore", DbType="Int NOT NULL")]
		public int HomeScore
		{
			get
			{
				return this._HomeScore;
			}
			set
			{
				if ((this._HomeScore != value))
				{
					this.OnHomeScoreChanging(value);
					this.SendPropertyChanging();
					this._HomeScore = value;
					this.SendPropertyChanged("HomeScore");
					this.OnHomeScoreChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AwayScore", DbType="Int NOT NULL")]
		public int AwayScore
		{
			get
			{
				return this._AwayScore;
			}
			set
			{
				if ((this._AwayScore != value))
				{
					this.OnAwayScoreChanging(value);
					this.SendPropertyChanging();
					this._AwayScore = value;
					this.SendPropertyChanged("AwayScore");
					this.OnAwayScoreChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
